//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Input/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystemManager : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystemManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""Space"",
            ""id"": ""8043dc57-dba1-4542-97e1-65707028ac99"",
            ""actions"": [
                {
                    ""name"": ""Tap"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7befa5a0-8b75-4256-baa7-e978895b0028"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Value"",
                    ""id"": ""a521edcd-fcba-42de-a85d-7672e6d24b74"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6dcf8aa2-adbe-4191-86e0-fc0dc220e39d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0408bfff-1a01-4859-ab18-d74bd679a9b7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4f4a8e5f-6859-4780-9e4d-bc44501d1178"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c8dae1de-ac06-45b7-a46e-69d01e68e239"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""97dfe6b5-3b00-4c5b-b764-7f164f8af7c3"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4bf69d56-c070-470a-aa21-1dc610e40962"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e7ff0683-b111-4278-a98b-6adf011423c7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""TapInput"",
            ""bindingGroup"": ""TapInput"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Space
        m_Space = asset.FindActionMap("Space", throwIfNotFound: true);
        m_Space_Tap = m_Space.FindAction("Tap", throwIfNotFound: true);
        m_Space_Shoot = m_Space.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Space
    private readonly InputActionMap m_Space;
    private ISpaceActions m_SpaceActionsCallbackInterface;
    private readonly InputAction m_Space_Tap;
    private readonly InputAction m_Space_Shoot;
    public struct SpaceActions
    {
        private @InputSystemManager m_Wrapper;
        public SpaceActions(@InputSystemManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Tap => m_Wrapper.m_Space_Tap;
        public InputAction @Shoot => m_Wrapper.m_Space_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_Space; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpaceActions set) { return set.Get(); }
        public void SetCallbacks(ISpaceActions instance)
        {
            if (m_Wrapper.m_SpaceActionsCallbackInterface != null)
            {
                @Tap.started -= m_Wrapper.m_SpaceActionsCallbackInterface.OnTap;
                @Tap.performed -= m_Wrapper.m_SpaceActionsCallbackInterface.OnTap;
                @Tap.canceled -= m_Wrapper.m_SpaceActionsCallbackInterface.OnTap;
                @Shoot.started -= m_Wrapper.m_SpaceActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_SpaceActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_SpaceActionsCallbackInterface.OnShoot;
            }
            m_Wrapper.m_SpaceActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Tap.started += instance.OnTap;
                @Tap.performed += instance.OnTap;
                @Tap.canceled += instance.OnTap;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
            }
        }
    }
    public SpaceActions @Space => new SpaceActions(this);
    private int m_TapInputSchemeIndex = -1;
    public InputControlScheme TapInputScheme
    {
        get
        {
            if (m_TapInputSchemeIndex == -1) m_TapInputSchemeIndex = asset.FindControlSchemeIndex("TapInput");
            return asset.controlSchemes[m_TapInputSchemeIndex];
        }
    }
    public interface ISpaceActions
    {
        void OnTap(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
}
